{"ast":null,"code":"var _jsxFileName = \"/Users/biomacbook/Documents/fnl-web-portal/src/Views/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Button from '../Atoms/Button/Button';\nimport MatchResults from './MatchResults';\nimport PlayerInput from '../Molecules/PlayerInput/PlayerInput';\nimport Input from '../Atoms/Input/Input';\nimport { fnlPlayers } from '../Utils';\nimport Dropdown from '../Molecules/Dropdown/Dropdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [formDataArray, setFormDataArray] = useState([]);\n  const [teamWhiteGoalie, setTeamWhiteGoalie] = useState('');\n  const [teamBlackGoalie, setTeamBlackGoalie] = useState('');\n  const [teamWhitePlayers, setTeamWhitePlayers] = useState([{\n    name: ''\n  }]);\n  const [teamBlackPlayers, setTeamBlackPlayers] = useState([{\n    name: ''\n  }]);\n  const [monthToMonth, setmonthToMonth] = useState([{\n    name: ''\n  }]);\n  const [irAndOut, setIRAndOut] = useState([{\n    name: ''\n  }]);\n  const [weekToWeek, setWeekToWeek] = useState([{\n    name: ''\n  }]);\n  const [filteredPlayers, setFilteredPlayers] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [formData, setFormData] = useState({\n    game: {\n      teamWhite: {\n        Team: 'White',\n        players: [{}],\n        goalie: ''\n      },\n      teamBlack: {\n        Team: 'Black',\n        players: [{}],\n        goalie: ''\n      },\n      irAndOut: {\n        Team: 'irAndOut',\n        players: [{}]\n      },\n      monthToMonth: {\n        Team: 'monthToMonth',\n        players: [{}]\n      },\n      weekToWeek: {\n        Team: 'weekToWeek',\n        players: [{}]\n      }\n    }\n  });\n  const handlePlayerNameChange = (team, playerIndex, newName, playerType) => {\n    // Update the form data with the new name\n    setFormData(prevData => {\n      const updatedData = {\n        ...prevData\n      };\n      if (playerType === 'goalie') {\n        updatedData.game[team].goalie = newName;\n      } else {\n        updatedData.game[team].players = updatedData.game[team].players.map((player, index) => {\n          if (index === playerIndex) {\n            player.name = newName;\n          }\n          return player;\n        });\n      }\n      return updatedData;\n    });\n  };\n  const handleAddPlayer = team => {\n    const newPlayer = {\n      name: ''\n    };\n    switch (team) {\n      case 'teamWhite':\n        setTeamWhitePlayers(prevPlayers => [...prevPlayers, newPlayer]);\n        break;\n      case 'irAndOut':\n        setIRAndOut(prevPlayers => [...prevPlayers, newPlayer]);\n        break;\n      case 'monthToMonth':\n        setmonthToMonth(prevPlayers => [...prevPlayers, newPlayer]);\n        break;\n      case 'weekToWeek':\n        setWeekToWeek(prevPlayers => [...prevPlayers, newPlayer]);\n        break;\n      default:\n        setTeamBlackPlayers(prevPlayers => [...prevPlayers, newPlayer]);\n        break;\n    }\n    setFormData(prevData => {\n      const updatedData = {\n        ...prevData\n      };\n      updatedData.game[team].players.push({});\n      return updatedData;\n    });\n  };\n  const removePlayer = (team, playerIndex) => {\n    switch (team) {\n      case 'teamWhite':\n        if (teamWhitePlayers.length === 1) return;\n        setTeamWhitePlayers(prevPlayers => prevPlayers.filter((player, index) => index !== playerIndex));\n        break;\n      case 'irAndOut':\n        if (irAndOut.length === 1) return;\n        setIRAndOut(prevPlayers => prevPlayers.filter((player, index) => index !== playerIndex));\n        break;\n      case 'weekToWeek':\n        if (weekToWeek.length === 1) return;\n        setWeekToWeek(prevPlayers => prevPlayers.filter((player, index) => index !== playerIndex));\n        break;\n      case 'monthToMonth':\n        if (monthToMonth.length === 1) return;\n        setmonthToMonth(prevPlayers => prevPlayers.filter((player, index) => index !== playerIndex));\n        break;\n      default:\n        if (teamBlackPlayers.length === 1) return;\n        setTeamBlackPlayers(prevPlayers => prevPlayers.filter((player, index) => index !== playerIndex));\n        break;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Add the current date to the form data\n    const currentDate = new Date().toLocaleDateString();\n    const formDataArray = JSON.parse(localStorage.getItem('formDataArray')) || [];\n    const weekNumber = formDataArray.length === 0 ? 1 : formDataArray.length + 1;\n    const updatedFormData = {\n      ...formData,\n      date: currentDate,\n      week: weekNumber\n    };\n    // Save the form data to local storage\n    localStorage.setItem('formDataArray', JSON.stringify(updatedFormData));\n    // Push the form data into the array\n    setFormDataArray(prevDataArray => [...prevDataArray, updatedFormData]);\n  };\n  useEffect(() => {\n    // Load the form data array from local storage\n    const savedFormDataArray = JSON.parse(localStorage.getItem('formDataArray')) || [];\n    if (savedFormDataArray.length > 0) {\n      setFormDataArray(savedFormDataArray);\n    }\n  }, []);\n\n  // set the input value to the name of the player selected\n  const handleNameSelect = (name, inputType, playerIndex) => {\n    switch (inputType) {\n      case 'teamWhiteGoalie':\n        setTeamWhiteGoalie(name);\n        handlePlayerNameChange('teamWhite', null, name, 'goalie');\n        setFilteredPlayers([]);\n        break;\n      case 'teamBlackGoalie':\n        setTeamBlackGoalie(name);\n        handlePlayerNameChange('teamBlack', null, name, 'goalie');\n        setFilteredPlayers([]);\n        break;\n      case 'teamWhitePlayer':\n        const newTeamWhitePlayers = [...teamWhitePlayers];\n        newTeamWhitePlayers[playerIndex] = {\n          ...newTeamWhitePlayers[playerIndex],\n          name\n        };\n        handlePlayerNameChange('teamWhite', playerIndex, name, 'player');\n        setTeamWhitePlayers(newTeamWhitePlayers);\n        setFilteredPlayers([]);\n        break;\n      case 'teamBlackPlayer':\n        const newTeamBlackPlayers = [...teamBlackPlayers];\n        newTeamBlackPlayers[playerIndex] = {\n          ...newTeamBlackPlayers[playerIndex],\n          name\n        };\n        handlePlayerNameChange('teamBlack', playerIndex, name, 'player');\n        setTeamBlackPlayers(newTeamBlackPlayers);\n        setFilteredPlayers([]);\n        break;\n      case 'irAndOut':\n        const newIRAndOut = [...irAndOut];\n        newIRAndOut[playerIndex] = {\n          ...newIRAndOut[playerIndex],\n          name\n        };\n        handlePlayerNameChange('irAndOut', playerIndex, name, 'player');\n        setIRAndOut(newIRAndOut);\n        break;\n      case 'monthToMonth':\n        const newMonthToMonth = [...monthToMonth];\n        newMonthToMonth[playerIndex] = {\n          ...newMonthToMonth[playerIndex],\n          name\n        };\n        handlePlayerNameChange('monthToMonth', playerIndex, name, 'player');\n        setmonthToMonth(newMonthToMonth);\n        setFilteredPlayers([]);\n        break;\n      case 'weekToWeek':\n        const newWeekToWeek = [...weekToWeek];\n        newWeekToWeek[playerIndex] = {\n          ...newWeekToWeek[playerIndex],\n          name\n        };\n        handlePlayerNameChange('weekToWeek', playerIndex, name, 'player');\n        setWeekToWeek(newWeekToWeek);\n        setFilteredPlayers([]);\n        break;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"FNL Roll Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row',\n            gap: '20px',\n            justifyContent: 'space-around'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Team White\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                role: \"img\",\n                \"aria-label\": \"White Flag\",\n                children: \"\\uD83C\\uDFF3\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              value: teamWhiteGoalie,\n              onChange: e => {\n                setTeamWhiteGoalie(e.target.value);\n                handlePlayerNameChange('teamWhite', null, e.target.value, 'goalie');\n              },\n              placeholder: \"Goalie\",\n              onFocus: e => {\n                setShowDropdown(true);\n\n                // Add your custom logic here\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              data: filteredPlayers,\n              handleNameSelect: handleNameSelect,\n              index: null,\n              nameType: 'teamWhiteGoalie',\n              showDropdown: showDropdown\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 29\n            }, this), teamWhitePlayers.map((player, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(PlayerInput, {\n                value: player.name,\n                onChange: e => {\n                  const newPlayers = [...teamWhitePlayers];\n                  newPlayers[index].name = e.target.value;\n                  setTeamWhitePlayers(newPlayers);\n                  handlePlayerNameChange('teamWhite', index, e.target.value, 'player');\n                },\n                onFocus: e => {\n                  setShowDropdown(true);\n                  set;\n\n                  // Add your custom logic here\n                },\n\n                placeholder: `Player ${index + 1}`,\n                onAdd: () => handleAddPlayer('teamWhite'),\n                onRemove: () => removePlayer('teamWhite', index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                data: filteredPlayers,\n                handleNameSelect: handleNameSelect,\n                index: index,\n                nameType: 'teamWhitePlayer'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Team Black\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                role: \"img\",\n                \"aria-label\": \"Black Flag\",\n                children: \"\\uD83C\\uDFF4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              value: teamBlackGoalie,\n              onChange: e => {\n                setTeamBlackGoalie(e.target.value);\n                handlePlayerNameChange('teamBlack', null, e.target.value, 'goalie');\n              },\n              placeholder: \"Goalie\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              data: filteredPlayers,\n              handleNameSelect: handleNameSelect,\n              index: null,\n              nameType: 'teamBlackGoalie'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 29\n            }, this), teamBlackPlayers.map((player, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(PlayerInput, {\n                value: player.name,\n                onChange: e => {\n                  const newPlayers = [...teamBlackPlayers];\n                  newPlayers[index].name = e.target.value;\n                  setTeamBlackPlayers(newPlayers);\n                  handlePlayerNameChange('teamBlack', index, e.target.value, 'player');\n                },\n                placeholder: `Player ${index + 1}`,\n                onAdd: () => handleAddPlayer('teamBlack'),\n                onRemove: () => removePlayer('teamBlack', index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                data: filteredPlayers,\n                handleNameSelect: handleNameSelect,\n                index: index,\n                nameType: 'teamBlackPlayer'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row',\n            gap: '20px',\n            justifyContent: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '20px',\n              marginTop: '50px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"IR/Out\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 29\n            }, this), irAndOut.map((player, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(PlayerInput, {\n                value: player.name,\n                onChange: e => {\n                  const newPlayers = [...irAndOut];\n                  newPlayers[index].name = e.target.value;\n                  setIRAndOut(newPlayers);\n                  handlePlayerNameChange('irAndOut', index, e.target.value, 'player');\n                },\n                placeholder: `Player ${index + 1}`,\n                onAdd: () => handleAddPlayer('irAndOut'),\n                onRemove: () => removePlayer('irAndOut', index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                data: filteredPlayers,\n                handleNameSelect: handleNameSelect,\n                index: index,\n                nameType: 'irAndOut'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '20px',\n              marginTop: '50px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Month to Month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 29\n            }, this), monthToMonth.map((player, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(PlayerInput, {\n                value: player.name,\n                onChange: e => {\n                  const newPlayers = [...monthToMonth];\n                  newPlayers[index].name = e.target.value;\n                  setmonthToMonth(newPlayers);\n                  handlePlayerNameChange('monthToMonth', index, e.target.value, 'player');\n                },\n                placeholder: `Player ${index + 1}`,\n                onAdd: () => handleAddPlayer('monthToMonth'),\n                onRemove: () => removePlayer('monthToMonth', index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                data: filteredPlayers,\n                handleNameSelect: handleNameSelect,\n                index: index,\n                nameType: 'monthToMonth'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '20px',\n              marginTop: '50px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Week to week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 29\n            }, this), weekToWeek.map((player, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(PlayerInput, {\n                value: player.name,\n                onChange: e => {\n                  const newPlayers = [...weekToWeek];\n                  newPlayers[index].name = e.target.value;\n                  setWeekToWeek(newPlayers);\n                  handlePlayerNameChange('weekToWeek', index, e.target.value, 'player');\n                },\n                placeholder: `Player ${index + 1}`,\n                onAdd: () => handleAddPlayer('weekToWeek'),\n                onRemove: () => removePlayer('weekToWeek', index)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                data: filteredPlayers,\n                handleNameSelect: handleNameSelect,\n                index: index,\n                nameType: 'weekToWeek'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            marginTop: '50px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            title: \"Submit\",\n            type: \"submit\",\n            color: \"#2196f3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MatchResults, {\n      formDataArray: formDataArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"ZDT+aaGMQwhcvpQimD6y3Fo90JY=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","Button","MatchResults","PlayerInput","Input","fnlPlayers","Dropdown","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","formDataArray","setFormDataArray","teamWhiteGoalie","setTeamWhiteGoalie","teamBlackGoalie","setTeamBlackGoalie","teamWhitePlayers","setTeamWhitePlayers","name","teamBlackPlayers","setTeamBlackPlayers","monthToMonth","setmonthToMonth","irAndOut","setIRAndOut","weekToWeek","setWeekToWeek","filteredPlayers","setFilteredPlayers","showDropdown","setShowDropdown","formData","setFormData","game","teamWhite","Team","players","goalie","teamBlack","handlePlayerNameChange","team","playerIndex","newName","playerType","prevData","updatedData","map","player","index","handleAddPlayer","newPlayer","prevPlayers","push","removePlayer","length","filter","handleSubmit","e","preventDefault","currentDate","Date","toLocaleDateString","JSON","parse","localStorage","getItem","weekNumber","updatedFormData","date","week","setItem","stringify","prevDataArray","savedFormDataArray","handleNameSelect","inputType","newTeamWhitePlayers","newTeamBlackPlayers","newIRAndOut","newMonthToMonth","newWeekToWeek","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","onSubmit","flexDirection","gap","role","value","onChange","target","placeholder","onFocus","data","nameType","newPlayers","set","onAdd","onRemove","marginTop","title","type","color","_c","$RefreshReg$"],"sources":["/Users/biomacbook/Documents/fnl-web-portal/src/Views/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Button from '../Atoms/Button/Button';\nimport MatchResults from './MatchResults';\nimport PlayerInput from '../Molecules/PlayerInput/PlayerInput';\nimport Input from '../Atoms/Input/Input';\nimport { fnlPlayers } from '../Utils';\nimport Dropdown from '../Molecules/Dropdown/Dropdown';\n\nconst Game = () => {\n    const [formDataArray, setFormDataArray] = useState([]);\n    const [teamWhiteGoalie, setTeamWhiteGoalie] = useState('');\n    const [teamBlackGoalie, setTeamBlackGoalie] = useState('');\n    const [teamWhitePlayers, setTeamWhitePlayers] = useState([{ name: '' }]);\n    const [teamBlackPlayers, setTeamBlackPlayers] = useState([{ name: '' }]);\n    const [monthToMonth, setmonthToMonth] = useState([{ name: '' }]);\n    const [irAndOut, setIRAndOut] = useState([{ name: '' }]);\n    const [weekToWeek, setWeekToWeek] = useState([{ name: '' }]);\n    const [filteredPlayers, setFilteredPlayers] = useState([]);\n    const [showDropdown, setShowDropdown] = useState(false);\n    const [formData, setFormData] = useState({\n        game: {\n            teamWhite: {\n                Team: 'White',\n                players: [{}],\n                goalie: '',\n            },\n            teamBlack: {\n                Team: 'Black',\n                players: [{}],\n                goalie: '',\n            },\n            irAndOut: {\n                Team: 'irAndOut',\n                players: [{}],\n            },\n            monthToMonth: {\n                Team: 'monthToMonth',\n                players: [{}],\n            },\n            weekToWeek: {\n                Team: 'weekToWeek',\n                players: [{}],\n            },\n        },\n    });\n  \n    const handlePlayerNameChange = (team, playerIndex, newName, playerType) => {\n        \n        // Update the form data with the new name\n        setFormData((prevData) => {\n            const updatedData = { ...prevData };\n            if (playerType === 'goalie') {\n                updatedData.game[team].goalie = newName;\n            } else {\n                updatedData.game[team].players = updatedData.game[team].players.map(\n                    (player, index) => {\n                        if (index === playerIndex) {\n                            player.name = newName;\n                        }\n                        return player;\n                    }\n                );\n            }\n            return updatedData;\n        });\n\n    };\n\n    const handleAddPlayer = (team) => {\n        const newPlayer = { name: '' };\n        switch (team) {\n            case 'teamWhite':\n                setTeamWhitePlayers((prevPlayers) => [...prevPlayers, newPlayer]);\n                break;\n            case 'irAndOut':\n                setIRAndOut((prevPlayers) => [...prevPlayers, newPlayer]);\n                break;\n            case 'monthToMonth':\n                setmonthToMonth((prevPlayers) => [...prevPlayers, newPlayer]);\n                break;\n            case 'weekToWeek':\n                setWeekToWeek((prevPlayers) => [...prevPlayers, newPlayer]);\n                break;\n            default:\n                setTeamBlackPlayers((prevPlayers) => [...prevPlayers, newPlayer]);\n                break;\n        }\n        setFormData((prevData) => {\n            const updatedData = { ...prevData };\n            updatedData.game[team].players.push({});\n            return updatedData;\n        });\n    };\n    const removePlayer = (team, playerIndex) => {\n        switch (team) {\n            case 'teamWhite':\n                if (teamWhitePlayers.length === 1) return;\n                setTeamWhitePlayers((prevPlayers) =>\n                    prevPlayers.filter((player, index) => index !== playerIndex)\n                );\n                break;\n            case 'irAndOut':\n                if (irAndOut.length === 1) return;\n                setIRAndOut((prevPlayers) =>\n                    prevPlayers.filter((player, index) => index !== playerIndex)\n                );\n                break;\n            case 'weekToWeek':\n                if (weekToWeek.length === 1) return;\n                setWeekToWeek((prevPlayers) =>\n                    prevPlayers.filter((player, index) => index !== playerIndex)\n                );\n                break;\n            case 'monthToMonth':\n                if (monthToMonth.length === 1) return;\n                setmonthToMonth((prevPlayers) =>\n                    prevPlayers.filter((player, index) => index !== playerIndex)\n                );\n                break;\n            default:\n                if (teamBlackPlayers.length === 1) return;\n                setTeamBlackPlayers((prevPlayers) =>\n                    prevPlayers.filter((player, index) => index !== playerIndex)\n                );\n                break;\n        }\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // Add the current date to the form data\n        const currentDate = new Date().toLocaleDateString();\n        const formDataArray = JSON.parse(localStorage.getItem('formDataArray')) || [];\n        const weekNumber = formDataArray.length === 0 ? 1 : formDataArray.length + 1;\n        const updatedFormData = {\n            ...formData,\n            date: currentDate,\n            week: weekNumber,\n        };\n        // Save the form data to local storage\n        localStorage.setItem('formDataArray', JSON.stringify(updatedFormData));\n        // Push the form data into the array\n        setFormDataArray((prevDataArray) => [...prevDataArray, updatedFormData]);\n\n    };\n\n    useEffect(() => {\n        // Load the form data array from local storage\n        const savedFormDataArray = JSON.parse(localStorage.getItem('formDataArray')) || [];\n        if (savedFormDataArray.length > 0) {\n            setFormDataArray(savedFormDataArray);\n        }\n    }, []);\n\n    // set the input value to the name of the player selected\n    const handleNameSelect = (name, inputType, playerIndex) => {\n        switch (inputType) {\n            case 'teamWhiteGoalie':\n                setTeamWhiteGoalie(name);\n                handlePlayerNameChange('teamWhite', null, name, 'goalie');\n                setFilteredPlayers([]);\n                break;\n\n            case 'teamBlackGoalie':\n                setTeamBlackGoalie(name);\n                handlePlayerNameChange('teamBlack', null, name, 'goalie');\n                setFilteredPlayers([]);\n                break;\n\n            case 'teamWhitePlayer':\n                const newTeamWhitePlayers = [...teamWhitePlayers];\n                newTeamWhitePlayers[playerIndex] = { ...newTeamWhitePlayers[playerIndex], name };\n                handlePlayerNameChange('teamWhite', playerIndex, name, 'player');\n                setTeamWhitePlayers(newTeamWhitePlayers);\n                setFilteredPlayers([]);\n                break;\n\n            case 'teamBlackPlayer':\n                const newTeamBlackPlayers = [...teamBlackPlayers];\n                newTeamBlackPlayers[playerIndex] = { ...newTeamBlackPlayers[playerIndex], name };\n                handlePlayerNameChange('teamBlack', playerIndex, name, 'player');\n                setTeamBlackPlayers(newTeamBlackPlayers);\n                setFilteredPlayers([]);\n                break;\n\n            case 'irAndOut':\n                const newIRAndOut = [...irAndOut];\n                newIRAndOut[playerIndex] = { ...newIRAndOut[playerIndex], name };\n                handlePlayerNameChange('irAndOut', playerIndex, name, 'player');\n                setIRAndOut(newIRAndOut);\n                \n                break;\n\n            case 'monthToMonth':\n                const newMonthToMonth = [...monthToMonth];\n                newMonthToMonth[playerIndex] = { ...newMonthToMonth[playerIndex], name };\n                handlePlayerNameChange('monthToMonth', playerIndex, name, 'player');\n                setmonthToMonth(newMonthToMonth);\n                setFilteredPlayers([]);\n\n                break;\n            case 'weekToWeek':\n                const newWeekToWeek = [...weekToWeek];\n                newWeekToWeek[playerIndex] = { ...newWeekToWeek[playerIndex], name };\n                handlePlayerNameChange('weekToWeek', playerIndex, name, 'player');\n                setWeekToWeek(newWeekToWeek);\n                setFilteredPlayers([]);\n                break;\n            default:\n                break;\n        }\n    };\n\n    return (\n        <>\n            <h1 style={{ textAlign: 'center' }}>FNL Roll Call</h1>\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <form onSubmit={handleSubmit}>\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            gap: '20px',\n                            justifyContent: 'space-around',\n                        }}\n                    >\n                        <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>\n                            <h3>\n                                Team White{' '}\n                                <span role='img' aria-label='White Flag'>\n                                    🏳️\n                                </span>\n                            </h3>\n                            <Input\n                                value={teamWhiteGoalie}\n                                onChange={(e) => {\n                                    setTeamWhiteGoalie(e.target.value);\n                                    handlePlayerNameChange(\n                                        'teamWhite',\n                                        null,\n                                        e.target.value,\n                                        'goalie'\n                                    );\n                                }}\n                                placeholder='Goalie'\n                                onFocus={(e) => {\n                                    \n                                        setShowDropdown(true);\n                                    \n                                    // Add your custom logic here\n                                }}\n                            />\n                            {/* dropdown */}\n                            <Dropdown\n                                data={filteredPlayers}\n                                handleNameSelect={handleNameSelect}\n                                index={null}\n                                nameType={'teamWhiteGoalie'}\n                                showDropdown={showDropdown}\n                            />\n\n                            {teamWhitePlayers.map((player, index) => (\n                                <React.Fragment key={index}>\n                                    <PlayerInput\n                                        value={player.name}\n                                        onChange={(e) => {\n                                            const newPlayers = [...teamWhitePlayers];\n                                            newPlayers[index].name = e.target.value;\n                                            setTeamWhitePlayers(newPlayers);\n                                            handlePlayerNameChange(\n                                                'teamWhite',\n                                                index,\n                                                e.target.value,\n                                                'player'\n                                            );\n                                        }}\n                                        onFocus={(e) => {\n\n                                            setShowDropdown(true);\n                                            set\n\n                                            // Add your custom logic here\n                                        }}\n                                        placeholder={`Player ${index + 1}`}\n                                        onAdd={() => handleAddPlayer('teamWhite')}\n                                        onRemove={() => removePlayer('teamWhite', index)}\n                                    />\n                                    {/* dropdown */}\n                                    <Dropdown\n                                        data={filteredPlayers}\n                                        handleNameSelect={handleNameSelect}\n                                        index={index}\n                                        nameType={'teamWhitePlayer'}\n                                    />\n                                </React.Fragment>\n                            ))}\n                        </div>\n\n                        <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>\n                            <h3>\n                                Team Black{' '}\n                                <span role='img' aria-label='Black Flag'>\n                                    🏴\n                                </span>\n                            </h3>\n                            <Input\n                                value={teamBlackGoalie}\n                                onChange={(e) => {\n                                    setTeamBlackGoalie(e.target.value);\n                                    handlePlayerNameChange(\n                                        'teamBlack',\n                                        null,\n                                        e.target.value,\n                                        'goalie'\n                                    );\n                                }}\n                                placeholder='Goalie'\n                            />\n                            {/* dropdown */}\n                            <Dropdown\n                                data={filteredPlayers}\n                                handleNameSelect={handleNameSelect}\n                                index={null}\n                                nameType={'teamBlackGoalie'}\n                            />\n\n                            {teamBlackPlayers.map((player, index) => (\n                                <React.Fragment key={index}>\n                                    <PlayerInput\n                                        value={player.name}\n                                        onChange={(e) => {\n                                            const newPlayers = [...teamBlackPlayers];\n                                            newPlayers[index].name = e.target.value;\n                                            setTeamBlackPlayers(newPlayers);\n                                            handlePlayerNameChange(\n                                                'teamBlack',\n                                                index,\n                                                e.target.value,\n                                                'player'\n                                            );\n                                        }}\n                                        placeholder={`Player ${index + 1}`}\n                                        onAdd={() => handleAddPlayer('teamBlack')}\n                                        onRemove={() => removePlayer('teamBlack', index)}\n                                    />\n                                    {/* dropdown */}\n                                    <Dropdown\n                                        data={filteredPlayers}\n                                        handleNameSelect={handleNameSelect}\n                                        index={index}\n                                        nameType={'teamBlackPlayer'}\n                                    />\n                                </React.Fragment>\n                            ))}\n                        </div>\n                    </div>\n\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            gap: '20px',\n                            justifyContent: 'center',\n                        }}\n                    >\n                        <div\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                gap: '20px',\n                                marginTop: '50px',\n                            }}\n                        >\n                            <h3>IR/Out</h3>\n                            {irAndOut.map((player, index) => (\n                                <React.Fragment key={index}>\n                                    <PlayerInput\n                                        value={player.name}\n                                        onChange={(e) => {\n                                            const newPlayers = [...irAndOut];\n                                            newPlayers[index].name = e.target.value;\n                                            setIRAndOut(newPlayers);\n                                            handlePlayerNameChange(\n                                                'irAndOut',\n                                                index,\n                                                e.target.value,\n                                                'player'\n                                            );\n                                        }}\n                                        placeholder={`Player ${index + 1}`}\n                                        onAdd={() => handleAddPlayer('irAndOut')}\n                                        onRemove={() => removePlayer('irAndOut', index)}\n                                    />\n                                    <Dropdown\n                                        data={filteredPlayers}\n                                        handleNameSelect={handleNameSelect}\n                                        index={index}\n                                        nameType={'irAndOut'}\n                                    />\n                                </React.Fragment>\n                            ))}\n                        </div>\n\n                        <div\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                gap: '20px',\n                                marginTop: '50px',\n                            }}\n                        >\n                            <h3>Month to Month</h3>\n                            {monthToMonth.map((player, index) => (\n                                <React.Fragment key={index}>\n                                    <PlayerInput\n                                        value={player.name}\n                                        onChange={(e) => {\n                                            const newPlayers = [...monthToMonth];\n                                            newPlayers[index].name = e.target.value;\n                                            setmonthToMonth(newPlayers);\n                                            handlePlayerNameChange(\n                                                'monthToMonth',\n                                                index,\n                                                e.target.value,\n                                                'player'\n                                            );\n                                        }}\n                                        placeholder={`Player ${index + 1}`}\n                                        onAdd={() => handleAddPlayer('monthToMonth')}\n                                        onRemove={() => removePlayer('monthToMonth', index)}\n                                    />\n                                    <Dropdown\n                                        data={filteredPlayers}\n                                        handleNameSelect={handleNameSelect}\n                                        index={index}\n                                        nameType={'monthToMonth'}\n                                    />\n                                </React.Fragment>\n                            ))}\n                        </div>\n                        <div\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                gap: '20px',\n                                marginTop: '50px',\n                            }}\n                        >\n                            <h3>Week to week</h3>\n                            {weekToWeek.map((player, index) => (\n                                <React.Fragment key={index}>\n                                    <PlayerInput\n                                        value={player.name}\n                                        onChange={(e) => {\n                                            const newPlayers = [...weekToWeek];\n                                            newPlayers[index].name = e.target.value;\n                                            setWeekToWeek(newPlayers);\n                                            handlePlayerNameChange(\n                                                'weekToWeek',\n                                                index,\n                                                e.target.value,\n                                                'player'\n                                            );\n                                        }}\n                                        placeholder={`Player ${index + 1}`}\n                                        onAdd={() => handleAddPlayer('weekToWeek')}\n                                        onRemove={() => removePlayer('weekToWeek', index)}\n                                    />\n                                    <Dropdown\n                                        data={filteredPlayers}\n                                        handleNameSelect={handleNameSelect}\n                                        index={index}\n                                        nameType={'weekToWeek'}\n                                    />\n                                </React.Fragment>\n                            ))}\n                        </div>\n                    </div>\n                    <div style={{ display: 'flex', marginTop: '50px' }}>\n                        <Button title='Submit' type='submit' color='#2196f3' />\n                    </div>\n                </form>\n            </div>\n            <MatchResults formDataArray={formDataArray} />\n        </>\n    );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}